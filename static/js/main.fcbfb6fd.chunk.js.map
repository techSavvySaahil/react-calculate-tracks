{"version":3,"sources":["loco.js","carriage.js","newTrain.js","train.js","App.js","serviceWorker.js","index.js","img/loco.jpg","img/carriage.jpg"],"names":["Loco","_this$props","this","props","isDragging","connectDragSource","react_default","a","createElement","id","src","loco","React","Component","DragSource","beginDrag","monitor","component","comp","connect","dragSource","Carriage","carriage","NewTrain","isOver","canDrop","connectDropTarget","className","text","DropTarget","getItem","drop","didDrop","item","makeNewTrain","dropTarget","isOverCurrent","shallow","itemType","getItemType","Train","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","arrivalTime","departureTime","that","assertThisInitialized","calculateComp","locos","Array","from","keys","cars","updateTimings","e","flag","target","includes","time","value","index","updateTrainTime","map","elem","key","type","disabled","defaultValue","onChange","placeholder","checkDrop","updateTrain","App","trainArr","maxTracks","newTrainCB","arr","push","setState","arrival","parseFloat","toFixed","calculateTracks","tracks","tracksArr","some","departure","alert","concat","sort","b","forEach","_this2","src_loco","src_carriage","newTrain","train","src_train","onClick","DragDropContext","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fcbfb6fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport loco from './img/loco.jpg';\r\nimport {DragSource} from 'react-dnd';\r\n\r\nconst compSource = {\r\n  beginDrag(props, monitor, component) {\r\n    // Return the data describing the dragged item\r\n    const item = { comp: \"loco\" };\r\n    return item;\r\n  }\r\n};\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDragSource: connect.dragSource(),\r\n    // You can ask the monitor about the current drag state:\r\n    isDragging: monitor.isDragging()\r\n  };\r\n}\r\n\r\nclass Loco extends React.Component{\r\n\trender() {\r\n\t\tconst { isDragging, connectDragSource } = this.props;\r\n\t\treturn connectDragSource(<img id=\"loco\" src={loco} />);\r\n\t}\r\n}\r\n\r\nexport default DragSource(\"loco\", compSource, collect)(Loco);","import React from 'react';\r\nimport carriage from './img/carriage.jpg';\r\nimport {DragSource} from 'react-dnd';\r\n\r\nconst cardSource = {\r\n  beginDrag(props, monitor, component) {\r\n    // Return the data describing the dragged item\r\n    const item = { comp: \"carriage\" };\r\n    return item;\r\n  }\r\n};\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDragSource: connect.dragSource(),\r\n    // You can ask the monitor about the current drag state:\r\n    isDragging: monitor.isDragging()\r\n  };\r\n}\r\n\r\nclass Carriage extends React.Component{\r\n\trender() {\r\n\t\tconst { isDragging, connectDragSource } = this.props;\r\n\t\treturn connectDragSource(<img id=\"carriage\" src={carriage} />);\r\n\t}\r\n}\r\n\r\nexport default DragSource(\"carriage\", cardSource, collect)(Carriage);","import React from 'react';\r\nimport { DropTarget } from 'react-dnd';\r\n\r\nconst dropTarg = {\r\n  canDrop(props, monitor) {\r\n    const item = monitor.getItem();\r\n    return true;\r\n  },\r\n  drop(props, monitor, component) {\r\n    if (monitor.didDrop()) {\r\n      // If you want, you can check whether some nested\r\n      // target already handled drop\r\n      return;\r\n    }\r\n\r\n    // Obtain the dragged item\r\n    const item = monitor.getItem();\r\n\r\n    props.makeNewTrain(item.comp);\r\n\r\n    // You can do something with it\r\n\r\n    // You can also do nothing and return a drop result,\r\n    // which will be available as monitor.getDropResult()\r\n    // in the drag source's endDrag() method\r\n  }\r\n};\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDropTarget: connect.dropTarget(),\r\n    // You can ask the monitor about the current drag state:\r\n    isOver: monitor.isOver(),\r\n    isOverCurrent: monitor.isOver({ shallow: true }),\r\n    canDrop: monitor.canDrop(),\r\n    itemType: monitor.getItemType()\r\n  };\r\n}\r\n\r\nclass NewTrain extends React.Component{\r\n  \trender() {\r\n\t\tconst { isOver, canDrop, connectDropTarget } = this.props;\r\n\t\treturn connectDropTarget(<div className=\"drop-area\">{this.props.text}</div>);\r\n\t}\r\n}\r\n\r\nexport default DropTarget([\"loco\",\"carriage\"], dropTarg, collect)(NewTrain);\r\n","import React from 'react';\r\nimport { DropTarget } from 'react-dnd';\r\nimport carriage from './img/carriage.jpg';\r\nimport loco from './img/loco.jpg';\r\n\r\nconst dropTarg = {\r\n  canDrop(props, monitor) {\r\n  \tconst item = monitor.getItem();\r\n    let check = props.checkDrop(props, item);\r\n    return check;\r\n  },\r\n  drop(props, monitor, component) {\r\n    if (monitor.didDrop()) {\r\n      // If you want, you can check whether some nested\r\n      // target already handled drop\r\n      return;\r\n    }\r\n\r\n    // Obtain the dragged item\r\n    const item = monitor.getItem();\r\n    if(item.comp === \"loco\") {\r\n    \tprops.updateTrain(\"loco\", component);\r\n    }\r\n    else if(item.comp === \"carriage\") {\r\n    \tprops.updateTrain(\"carriage\", component);\r\n    }\r\n\r\n    // props.makeNewTrain(item.comp);\r\n\r\n    // You can do something with it\r\n\r\n    // You can also do nothing and return a drop result,\r\n    // which will be available as monitor.getDropResult()\r\n    // in the drag source's endDrag() method\r\n  }\r\n};\r\n\r\nfunction collect(connect, monitor) {\r\n  return {\r\n    // Call this function inside render()\r\n    // to let React DnD handle the drag events:\r\n    connectDropTarget: connect.dropTarget(),\r\n    // You can ask the monitor about the current drag state:\r\n    isOver: monitor.isOver(),\r\n    isOverCurrent: monitor.isOver({ shallow: true }),\r\n    canDrop: monitor.canDrop(),\r\n    itemType: monitor.getItemType()\r\n  };\r\n}\r\n\r\nclass Train extends React.Component{\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tarrivalTime: \"\",\r\n\t\t\tdepartureTime: \"\"\r\n\t\t};\r\n\t\tvar that = this;\r\n\t\tthis.calculateComp = ()=> {\r\n\t\t\tif(that.props.loco) {\r\n\t\t\t\tthat.state.locos = Array.from(new Array(that.props.loco).keys());\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthat.state.locos = [];\r\n\t\t\t}\r\n\t\t\tif(that.props.carriage) {\r\n\t\t\t\tthat.state.cars = Array.from(new Array(that.props.carriage).keys());\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthat.state.cars = [];\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.updateTimings = (e) => {\r\n\t\t\tlet flag = e.target.className.includes(\"arrival\");\r\n\t\t\tlet time = e.target.value;\r\n\t\t\tlet index = this.props.index;\r\n\t\t\tthis.props.updateTrainTime(flag, time, index);\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tthis.calculateComp();\r\n\t\tconst { isOver, canDrop, connectDropTarget } = this.props;\r\n\t\treturn connectDropTarget(\r\n\t\t\t<div>\r\n\t\t\tTrain Number {this.props.index+1} <br />\r\n\t\t\t\t<div className=\"built-train\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.locos.map((elem, index)=> {\r\n\t\t\t\t\t\t\treturn(<img key={index} src={loco} />);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.cars.map((elem, index)=> {\r\n\t\t\t\t\t\t\treturn(<img key={index} src={carriage} />);\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"timings\">\r\n\t\t\t\t\t<input className=\"arrival input\" type=\"number\" disabled={(!this.props.loco || !this.props.carriage)} defaultValue={this.state.arrivalTime} onChange={this.updateTimings} placeholder=\"Arrival Time(eg. 10.15)\" />\r\n\t\t\t\t\t<input className=\"departure input\" type=\"number\" disabled={(!this.props.loco || !this.props.carriage)} defaultValue={this.state.departureTime} onChange={this.updateTimings} placeholder=\"Departure Time(eg. 14.20)\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DropTarget([\"loco\",\"carriage\"], dropTarg, collect)(Train);\r\n","import React, { Component } from 'react';\r\nimport './styles/App.css';\r\nimport Loco from './loco';\r\nimport Carriage from './carriage';\r\nimport NewTrain from './newTrain';\r\nimport Train from './train'\r\nimport { DragDropContext } from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {trainArr: [], maxTracks:0};\r\n    let that = this;\r\n    this.newTrainCB = (comp)=> {\r\n      let arr = this.state.trainArr;\r\n      if(comp === \"loco\") {\r\n        // make a new train with loco\r\n        arr.push({\r\n          loco:1,\r\n          carriage:0\r\n        });\r\n      }\r\n      else {\r\n        // make a new train with carriage\r\n        arr.push({\r\n          loco:0,\r\n          carriage:1\r\n        });\r\n      }\r\n      this.setState({trainArr: arr});\r\n    };\r\n    this.checkDrop = (props, item)=> {\r\n      if(item.comp === \"loco\") {\r\n        if(props.loco) {\r\n          return false;\r\n        }\r\n        else {\r\n          return true;\r\n        }\r\n      }\r\n      else if(item.comp === \"carriage\") {\r\n        if(props.carriage >1) {\r\n          return false;\r\n        }\r\n        else {\r\n          return true;\r\n        }\r\n      }\r\n    };\r\n    this.updateTrain = (item, component)=> {\r\n      let props = component.props;\r\n      let state = component.state;\r\n      let index = props.index;\r\n      let arr = that.state.trainArr;\r\n      arr[index][item]++;\r\n      that.setState({trainArr: arr});\r\n    };\r\n    this.updateTrainTime = (arrival, time, index) => {\r\n      if(index+1) {\r\n        let key = arrival ? \"arrival\" : \"departure\";\r\n        let arr = that.state.trainArr;\r\n        arr[index][key] = parseFloat(parseFloat(time).toFixed(2));\r\n        that.setState({trainArr: arr});\r\n      }\r\n    };\r\n    this.calculateTracks = ()=> {\r\n      let maxTracks = 0, tracks = 0, flag;\r\n      let tracksArr = [];\r\n      that.state.trainArr.some((elem, index)=> {\r\n        if(!elem.arrival || !elem.departure) {\r\n          alert(`All the trains should have arrival as well as departure timings. Please check Train number ${index+1}`);\r\n          flag = true;\r\n          return flag;\r\n        }\r\n        if(elem.arrival >= elem.departure) {\r\n          alert(`The arrival time should be before the departure time. Please check Train number ${index+1}.`);\r\n          flag = true;\r\n          return flag\r\n        }\r\n        tracksArr.push({time:elem.arrival, arrival:true});\r\n        tracksArr.push({time:elem.departure, arrival:false});\r\n      });\r\n      if(flag) {\r\n        return;\r\n      }\r\n      tracksArr.sort((a,b)=> {\r\n        if(a.time !== b.time) { return a.time-b.time}\r\n        else {\r\n          if(a.arrival) {\r\n            return -1;\r\n          }\r\n          else {\r\n            return 1;\r\n          }\r\n        }\r\n      });\r\n      tracksArr.forEach((elem)=> {\r\n        if(elem.arrival) {\r\n          tracks++;\r\n        }\r\n        else {\r\n          tracks--;\r\n        }\r\n        if(tracks > maxTracks) {\r\n          maxTracks = tracks;\r\n        }\r\n      });\r\n      this.setState({maxTracks:maxTracks});\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"app-info\">Check the number of tracks required for a station</div>\r\n        <div className=\"new-comp\">Drag these components to build a new train or upgrade an existing one:<br /><br />\r\n        <Loco /><br />\r\n        Locomotive<br/><br/>\r\n        <Carriage /><br />\r\n        Carriage\r\n        </div>\r\n        <div className=\"train-area\">\r\n          <NewTrain makeNewTrain={this.newTrainCB} text=\"Drag and Drop here for new trains\" />\r\n          <span className=\"build-info\">*Every train should have one locomotive and at least one and at most two carriages.</span><br/><br/>\r\n          <div className=\"train-rows\">\r\n            {this.state.trainArr.map((train,index)=>\r\n              <Train key={index} index={index} loco={train.loco} carriage={train.carriage} checkDrop={this.checkDrop} updateTrain={this.updateTrain} updateTrainTime={this.updateTrainTime} />\r\n            )}\r\n          </div>\r\n          <button onClick={this.calculateTracks}>Calculate tracks required</button>\r\n        </div>\r\n        <div className=\"max-tracks\">\r\n          <span>Maximum tracks required for this station are: </span>\r\n          <span className=\"track-count\">{this.state.maxTracks}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DragDropContext(HTML5Backend)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/loco.19ca0c2a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/carriage.100e52f4.jpg\";"],"sourceRoot":""}